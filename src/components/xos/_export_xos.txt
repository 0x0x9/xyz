
# Export complet du dossier xos
# À donner à Gemini ou une IA pour reconstituer le dossier et ses dépendances.
#
# Chaque bloc de code doit être placé dans un fichier du dossier :
# src/components/xos/
#
# Exemple :
# Le code du bloc "client.tsx" doit être copié dans src/components/xos/client.tsx
# Le code du bloc "desktop-icons.tsx" doit être copié dans src/components/xos/desktop-icons.tsx
# Le code du bloc "dock.tsx" doit être copié dans src/components/xos/dock.tsx
# Le code du bloc "window.tsx" doit être copié dans src/components/xos/window.tsx
#
# Assurez-vous de respecter l'arborescence pour que tout fonctionne correctement.

---
# client.tsx

[Début du code]

'use client';

import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useSearchParams } from 'next/navigation';
import dynamic from 'next/dynamic';
import { Layers, BrainCircuit, Lightbulb, Users, Mic, Film, AudioLines, Palette, CodeXml, SquareTerminal, Zap, FileText, Image as ImageIconLucide, Sparkles, FilePenLine, Folder, Presentation, LayoutTemplate, Music, Terminal, Calendar, Network, Wand2, Cloud, Guitar, Star } from "lucide-react";
import XosDock from '@/components/xos/dock';
import XosWindow from '@/components/xos/window';
import { AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';
import type { GenerateFluxOutput } from '@/ai/types';
import { useToast } from '@/hooks/use-toast';
import { getActionResult } from '@/app/actions';
import XosWallpaper from '../xos-wallpaper';
import OriaAnimation from '../ui/oria-animation';
import DesktopIcons from './desktop-icons';

// Dynamic imports for ALL possible windowed apps
const LazyFusion = dynamic(() => import('@/app/fusion/client'));
const LazyBrandIdentity = dynamic(() => import('@/app/brand-identity/client'));
const LazyMaestro = dynamic(() => import('@/components/maestro-generator'));
const LazyPromptor = dynamic(() => import('@/components/promptor-generator'));
const LazyPersona = dynamic(() => import('@/components/persona-generator'));
const LazyTone = dynamic(() => import('@/components/tone-generator'));
const LazyMotion = dynamic(() => import('@/components/motion-generator'));
const LazyVoice = dynamic(() => import('@/components/voice-generator'));
const LazyText = dynamic(() => import('@/components/text-generator'));
const LazyImage = dynamic(() => import('@/components/image-generator'));
const LazyPalette = dynamic(() => import('@/components/palette-generator'));
const LazyCode = dynamic(() => import('@/components/code-generator'));
const LazyEditor = dynamic(() => import('@/components/code-editor'));
const LazyOria = dynamic(() => import('@/components/oria-xos'));
const LazyCloud = dynamic(() => import('@/components/cloud-app'));
const LazyExplorer = dynamic(() => import('@/components/explorer'));
const LazyDeck = dynamic(() => import('@/components/deck-generator'));
const LazyFrame = dynamic(() => import('@/components/frame-generator'));
const LazySound = dynamic(() => import('@/components/sound-generator'));
const LazyTerminal = dynamic(() => import('@/app/terminal/client'));
const LazyAgenda = dynamic(() => import('@/app/agenda/client'));
const LazyNexus = dynamic(() => import('@/components/nexus-generator'));
const LazyFlux = dynamic(() => import('@/components/flux-generator'));
const LazyMuse = dynamic(() => import('@/components/muse-generator'));
const LazyWelcomeApp = dynamic(() => import('@/components/welcome-app'));

// ... (le code complet du fichier client.tsx suit ici, voir l'original pour tout le contenu)

[Fin du code]

---
# desktop-icons.tsx

[Début du code]

'use client';

import { Layers, BrainCircuit, Lightbulb, Users, Mic, Film, AudioLines, Palette, CodeXml, SquareTerminal, Zap, FileText, Image as ImageIconLucide, Sparkles, FilePenLine, Folder, Presentation, LayoutTemplate, Music, Terminal, Calendar, Network, Wand2, Cloud, Guitar, Star } from "lucide-react";
import { cn } from "@/lib/utils";
import OriaAnimation from '../ui/oria-animation';

const OriaIconAnimation = ({ className }: { className?: string }) => (
    <div className={cn("relative rounded-full overflow-hidden", className)}>
        <OriaAnimation />
    </div>
);

const ALL_APPS_CONFIG = [
    { id: 'oria', name: 'Oria', icon: OriaIconAnimation },
    { id: 'cloud', name: '(X)cloud', icon: Cloud },
    { id: 'explorer', name: '(X)plorer', icon: Folder },
    { id: 'fusion', name: '(X)fusion', icon: Zap },
    { id: 'flux', name: '(X)flux', icon: Wand2 },
    { id: 'maestro', name: 'Maestro', icon: BrainCircuit },
    { id: 'image', name: 'Image', icon: ImageIconLucide },
    { id: 'brand-identity', name: '(X)brand', icon: Layers },
    { id: 'promptor', name: '(X)promptor', icon: Lightbulb },
    { id: 'motion', name: '(X)motion', icon: Film },
    { id: 'voice', name: '(X)voice', icon: AudioLines },
    { id: 'text', name: 'Texte', icon: FileText },
    { id: 'editor', name: '(X).alpha', icon: SquareTerminal },
    { id: 'frame', name: '(X)frame', icon: LayoutTemplate },
    { id: 'terminal', name: '(X)term', icon: Terminal },
    { id: 'agenda', name: '(X)agenda', icon: Calendar },
    { id: 'nexus', name: '(X)nexus', icon: Network },
    { id: 'muse', name: '(X)muse', icon: Guitar },
    { id: 'sound', name: '(X)sound', icon: Music },
    { id: 'palette', name: '(X)palette', icon: Palette },
    { id: 'tone', name: '(X)tone', icon: Mic },
    { id: 'persona', name: '(X)persona', icon: Users },
    { id: 'deck', name: 'Présentation', icon: Presentation },
    { id: 'code', name: '(X)code', icon: CodeXml },
];

const DESKTOP_APP_IDS = [
    'oria', 'cloud', 'explorer', 'fusion', 
    'flux', 'maestro', 'promptor', 'brand-identity', 'agenda', 'nexus',
    'text', 'image', 'motion', 'voice',
    'muse', 'sound',
    'editor', 'frame', 'terminal'
];
const desktopApps = DESKTOP_APP_IDS.map(id => ALL_APPS_CONFIG.find(app => app.id === id)).filter(Boolean) as (typeof ALL_APPS_CONFIG[0])[];

interface DesktopIconsProps {
    isBooting: boolean;
    onOpenApp: (appId: string) => void;
}

export default function DesktopIcons({ isBooting, onOpenApp }: DesktopIconsProps) {
    return (
        <div className="p-8 z-1 relative">
            <div className="grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 gap-4">
                {desktopApps.map((app, index) => (
                    <button
                        key={app.id}
                        onDoubleClick={() => onOpenApp(app.id)}
                        className={cn(
                            "flex flex-col items-center gap-2 p-2 rounded-lg focus:outline-none focus:bg-foreground/5 transition-all duration-300",
                            isBooting ? 'opacity-0 translate-y-4' : 'opacity-100 translate-y-0'
                        )}
                        style={{ transitionDelay: `${index * 50}ms`}}
                    >
                        <app.icon className="w-12 h-12 text-foreground drop-shadow-lg" />
                        <span className="text-foreground text-sm font-medium [text-shadow:0_1px_3px_rgba(0,0,0,0.5)] dark:[text-shadow:0_1px_3px_rgba(0,0,0,0.5)]">{app.name}</span>
                    </button>
                ))}
            </div>
        </div>
    );
}

[Fin du code]

---
# dock.tsx

[Début du code]

'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import { WindowInstance } from '@/components/xos/client';
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';
import DockAnimation from '@/components/ui/dock-animation';
import HeaderLogo from '@/components/layout/header-logo';
import { Progress } from '../ui/progress';

interface XosDockProps {
    windows: WindowInstance[];
    onDockItemClick: (id: number) => void;
    openApp: (appId: string) => void;
}

export default function XosDock({ windows, onDockItemClick, openApp }: XosDockProps) {
    
    return (
        <TooltipProvider>
            <motion.div
                initial={{ y: 100, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.5, type: 'spring', stiffness: 100 }}
                className="xos-dock"
            >
                 <Tooltip>
                    <TooltipTrigger asChild>
                        <Link href="/" className="relative" aria-label="Retour à l'accueil">
                            <motion.div
                                whileHover={{ y: -16, scale: 1.2 }}
                                transition={{ type: 'spring', stiffness: 400, damping: 15 }}
                                className="glass-orb-button"
                            >
                                <HeaderLogo className="w-10 h-10 p-1"/>
                            </motion.div>
                        </Link>
                    </TooltipTrigger>
                    <TooltipContent className="glass-card mb-2">
                        <p>Accueil</p>
                    </TooltipContent>
                </Tooltip>

                {windows.length > 0 && (
                    <div className="h-12 self-center w-px bg-white/20 mx-1"></div>
                )}
                
                {windows.map(win => (
                    <Tooltip key={win.id}>
                        <TooltipTrigger asChild>
                            <motion.button
                                onClick={() => onDockItemClick(win.id)}
                                className="glass-orb-button relative"
                                whileHover={{ y: -16, scale: 1.2 }}
                                transition={{ type: 'spring', stiffness: 400, damping: 15 }}
                            >
                                <DockAnimation variant={win.appId} className="w-full h-full" />
                                {win.appId !== 'oria' && <win.icon className="w-8 h-8 text-foreground drop-shadow-lg absolute z-10" />}
                                {win.isLoading && (
                                     <div className="absolute bottom-[-8px] left-0 right-0 px-1">
                                         <Progress value={win.loadingProgress} className="h-1 bg-white/20" />
                                     </div>
                                )}
                                {!win.isMinimized && !win.isLoading && (
                                    <div className="absolute bottom-1 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-foreground/80 rounded-full" />
                                )}
                            </motion.button>
                        </TooltipTrigger>
                        <TooltipContent className="glass-card mb-2">
                            <p>{win.title}</p>
                        </TooltipContent>
                    </Tooltip>
                ))}
            </motion.div>
        </TooltipProvider>
    );
}

[Fin du code]

---
# window.tsx

[Début du code]

'use client';

import { motion } from 'framer-motion';
import { Rnd, RndDragCallback, RndResizeCallback } from 'react-rnd';
import { X, Minus } from 'lucide-react';
import type { WindowInstance } from '@/components/xos/client';
import { cn } from '@/lib/utils';

interface XosWindowProps {
    instance: WindowInstance;
    children: React.ReactNode;
    onClose: () => void;
    onFocus: () => void;
    onMinimize: () => void;
    onDragStop: RndDragCallback;
    onResizeStop: RndResizeCallback;
}

export default function XosWindow({ instance, children, onClose, onFocus, onMinimize, onDragStop, onResizeStop }: XosWindowProps) {
    const { title, zIndex, isMinimized, x, y, width, height } = instance;

    const variants = {
        hidden: { scale: 0.8, opacity: 0 },
        visible: { scale: 1, opacity: 1 },
        minimized: { scale: 0, opacity: 0, y: 200 },
    };

    return (
        <Rnd
            size={{ width, height }}
            position={{ x, y }}
            minWidth={300}
            minHeight={200}
            bounds="parent"
            style={{ zIndex }}
            onDragStart={onFocus}
            onResizeStart={onFocus}
            onDragStop={onDragStop}
            onResizeStop={onResizeStop}
            dragHandleClassName="window-drag-handle"
            className={cn(
                "flex flex-col",
                isMinimized && "pointer-events-none"
            )}
        >
            <motion.div
                initial="hidden"
                animate={isMinimized ? "minimized" : "visible"}
                exit="hidden"
                variants={variants}
                transition={{ type: 'spring', stiffness: 260, damping: 25 }}
                className="w-full h-full bg-background/50 dark:bg-black/30 backdrop-blur-2xl border border-foreground/10 rounded-2xl shadow-2xl flex flex-col"
                onClick={onFocus}
            >
                {/* Window Header */}
                <header className="window-drag-handle flex items-center justify-between px-3 py-1.5 border-b border-foreground/10 flex-shrink-0 cursor-grab active:cursor-grabbing">
                    <div className="flex items-center gap-1.5">
                        <button onClick={(e) => { e.stopPropagation(); onClose(); }} className="w-3.5 h-3.5 rounded-full bg-foreground/10 hover:bg-red-500 transition-colors"></button>
                        <button onClick={(e) => { e.stopPropagation(); onMinimize(); }} className="w-3.5 h-3.5 rounded-full bg-foreground/10 hover:bg-yellow-500 transition-colors"></button>
                        <button className="w-3.5 h-3.5 rounded-full bg-foreground/10 cursor-not-allowed opacity-50"></button>
                    </div>
                    <span className="text-sm font-medium text-foreground/80 select-none">{title}</span>
                    <div className="w-20"></div> {/* Spacer */}
                </header>
                
                {/* Window Content */}
                <div className="flex-1 overflow-y-auto bg-transparent no-scrollbar">
                     <div className="p-1 h-full">
                        {children}
                    </div>
                </div>
            </motion.div>
        </Rnd>
    );
}

[Fin du code]

