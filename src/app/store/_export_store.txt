# Export complet de la boutique (store)
# À donner à Gemini ou une IA pour reconstituer le dossier et ses dépendances.
# Chaque bloc de code doit être placé dans un fichier du dossier :
# src/app/store/
#
# Exemple :
# Le code du bloc "page.tsx" doit être copié dans src/app/store/page.tsx
# Le code du bloc "[productId]/client.tsx" doit être copié dans src/app/store/[productId]/client.tsx
# Le code du bloc "[productId]/page.tsx" doit être copié dans src/app/store/[productId]/page.tsx
#
# Assurez-vous de respecter l'arborescence pour que tout fonctionne correctement.

---
# page.tsx

[Début du code]

'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardTitle } from "@/components/ui/card";
import Image from "next/image";
import { ShoppingCart, ArrowRight, ArrowLeft, Cpu, Sparkles } from "lucide-react";
import useEmblaCarousel from 'embla-carousel-react';
import { products, type Product } from '@/lib/products';
import { useCart } from '@/hooks/use-cart-store';
import { useToast } from '@/hooks/use-toast';
import { motion } from 'framer-motion';


function ProductCard({ product }: { product: Product }) {
    const { addItem } = useCart();
    const { toast } = useToast();

    const handleAddToCart = (e: React.MouseEvent) => {
        e.preventDefault(); // Prevent link navigation
        e.stopPropagation(); // Stop event bubbling
        addItem(product);
        toast({
            title: "Ajouté au panier",
            description: `"${product.name}" a été ajouté à votre panier.`,
        });
    };
  
    return (
      <Link href={`/store/${product.id}`} className="block h-full">
       <Card className="group flex h-full flex-col overflow-hidden transition-all duration-300 rounded-2xl bg-card/95 hover:bg-card/25 dark:bg-card/80 dark:hover:bg-card/50 border border-border hover:border-primary/30 hover:shadow-2xl hover:shadow-primary/10 hover:backdrop-blur-xl">
          <CardContent className="relative flex-1 p-0">
            <div className="relative aspect-square">
                <Image
                    src={product.image}
                    alt={product.name}
                    fill
                    className="object-cover transition-transform duration-500"
                    data-ai-hint={product.hint}
                />
            </div>
            <div className="p-6">
                <h3 className="text-xl font-bold text-foreground">{product.name}</h3>
                <p className="mt-2 text-sm text-muted-foreground">{product.description}</p>
            </div>
          </CardContent>
          <div className="mt-auto flex items-center justify-between p-6 pt-0">
            <p className="text-2xl font-semibold text-foreground">{product.price.toFixed(2)}€</p>
            <Button size="icon" className="bg-primary hover:bg-primary/90 text-primary-foreground rounded-full aspect-square transition-transform group-hover:scale-110" onClick={handleAddToCart}>
                <ShoppingCart className="h-5 w-5" />
                <span className="sr-only">Ajouter au panier</span>
            </Button>
          </div>
        </Card>
      </Link>
    )
}

function FeaturedCarousel() {
    const [emblaRef, emblaApi] = useEmblaCarousel({
        loop: true,
        align: 'start',
    });
    const featuredProducts = products.filter(p => p.isFeatured);

    return (
        <div className="relative -mx-4">
             <div className="overflow-hidden" ref={emblaRef}>
                <div className="flex" style={{ backfaceVisibility: 'hidden' }}>
                     {featuredProducts.map((product) => (
                      <div className="flex-[0_0_100%] sm:flex-[0_0_50%] lg:flex-[0_0_33.33%] min-w-0 px-4" key={product.id}>
                        <ProductCard product={product} />
                      </div>
                    ))}
                </div>
            </div>
             <div className="absolute top-1/2 -translate-y-1/2 w-full flex justify-between px-4 md:px-10 pointer-events-none">
                <Button onClick={() => emblaApi?.scrollPrev()} size="icon" variant="glass" className="rounded-full pointer-events-auto">
                    <ArrowLeft />
                </Button>
                 <Button onClick={() => emblaApi?.scrollNext()} size="icon" variant="glass" className="rounded-full pointer-events-auto">
                    <ArrowRight />
                </Button>
            </div>
        </div>
    );
}


export default function StorePage() {
    const categories = [...new Set(products.map(p => p.category))];
    const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
    const filteredProducts = selectedCategory ? products.filter(p => p.category === selectedCategory) : products;

  return (
    <>
      <Header />
      <main className="flex-1">
        <section className="container mx-auto px-4 md:px-6 py-28 md:py-36 text-center">
            <div className="space-y-6 max-w-4xl mx-auto">
                <h1 className="text-4xl md:text-6xl lg:text-7xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70">
                La Boutique des Créatifs
                </h1>
                <p className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto">
                Le meilleur matériel et les logiciels les plus innovants, sélectionnés pour les créateurs exigeants qui repoussent les limites de l'imagination.
                </p>
            </div>
        </section>

        <section className="container mx-auto px-4 md:px-6">
            <div className="text-center mb-16">
                 <h2 className="text-3xl md:text-4xl font-bold">Au-delà des produits, un écosystème.</h2>
                 <p className="max-w-3xl mx-auto text-md text-muted-foreground mt-2">
                     Nos produits sont les briques d'un univers créatif unifié, conçu pour fonctionner en parfaite harmonie.
                 </p>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-20">
                <motion.div whileHover={{ y: -5 }} transition={{ type: 'spring', stiffness: 300 }}>
                    <Link href="/welcome">
                        <Card className="glass-card h-full p-8 flex flex-col justify-between text-center relative overflow-hidden group">
                            <div className="absolute -top-1/4 -right-1/4 w-1/2 h-1/2 bg-primary/30 rounded-full blur-3xl transition-all duration-500 group-hover:scale-150" />
                            <Sparkles className="h-12 w-12 text-primary mx-auto mb-4" />
                            <CardTitle className="text-3xl font-bold">L'Écosystème Créatif</CardTitle>
                            <CardContent className="p-0 mt-4">
                                <p className="text-muted-foreground text-lg">Découvrez (X)OS, l'environnement qui connecte tous vos outils et idées.</p>
                            </CardContent>
                             <Button variant="outline" className="mt-6 mx-auto rounded-full">
                                Découvrir (X)OS <ArrowRight className="ml-2 h-4 w-4" />
                            </Button>
                        </Card>
                    </Link>
                </motion.div>
                <motion.div whileHover={{ y: -5 }} transition={{ type: 'spring', stiffness: 300 }}>
                     <Link href="/hardware">
                        <Card className="glass-card h-full p-8 flex flex-col justify-between text-center relative overflow-hidden group">
                            <div className="absolute -bottom-1/4 -left-1/4 w-1/2 h-1/2 bg-blue-500/30 rounded-full blur-3xl transition-all duration-500 group-hover:scale-150" />
                            <Cpu className="h-12 w-12 text-blue-400 mx-auto mb-4" />
                            <CardTitle className="text-3xl font-bold">La Puissance Réinventée</CardTitle>
                            <CardContent className="p-0 mt-4">
                                <p className="text-muted-foreground text-lg">Explorez la Station X-1, le matériel conçu pour exceller avec (X)OS.</p>
                            </CardContent>
                             <Button variant="outline" className="mt-6 mx-auto rounded-full">
                                Explorer le matériel <ArrowRight className="ml-2 h-4 w-4" />
                            </Button>
                        </Card>
                    </Link>
                </motion.div>
            </div>
        </section>

        <section className="container mx-auto px-4 md:px-6 space-y-20">
            <div>
                <h2 className="text-3xl font-bold mb-8 text-center">Produits Phares</h2>
                <FeaturedCarousel />
            </div>

             <div>
                <h2 className="text-3xl font-bold mb-8 text-center">Tous nos produits</h2>
                 <div className="flex flex-wrap justify-center gap-2 mb-12">
                     <Button variant={!selectedCategory ? 'secondary' : 'glass'} onClick={() => setSelectedCategory(null)} className="rounded-full">Tous</Button>
                    {categories.map(category => (
                        <Button key={category} variant={selectedCategory === category ? 'secondary' : 'glass'} onClick={() => setSelectedCategory(category)} className="rounded-full">
                            {category}
                        </Button>
                    ))}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                    {filteredProducts.map(product => (
                        <ProductCard key={product.id} product={product} />
                    ))}
                </div>
            </div>
        </section>
      </main>
      <Footer />
    </>
  );
}

[Fin du code]

---
# [productId]/client.tsx

[Début du code]

'use client';

import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ShoppingCart, CheckCircle, Shield, Truck } from 'lucide-react';
import { useCart } from '@/hooks/use-cart-store';
import { useToast } from '@/hooks/use-toast';
import { type Product } from '@/lib/products';
import { Card, CardContent } from '@/components/ui/card';
import { PCConfigurator, type Configuration } from '@/components/ui/pc-configurator';
import { useState } from 'react';

export default function ProductClient({ product, relatedProducts }: { product: Product, relatedProducts: Product[] }) {
    const { addItem } = useCart();
    const { toast } = useToast();
    const [configuration, setConfiguration] = useState<Configuration | null>(null);
    const [totalPrice, setTotalPrice] = useState(product.price);

    const handleAddToCart = () => {
        const productToAdd = {
            ...product,
            price: totalPrice, // Use the configured price
            name: configuration ? `${product.name} (Configuré)` : product.name,
            configuration: configuration ?? undefined,
        };
        addItem(productToAdd);
        toast({
            title: "Ajouté au panier !",
            description: `"${productToAdd.name}" est maintenant dans votre panier.`,
        });
    };
    
    const handleConfigChange = (newConfig: Configuration, newPrice: number) => {
        setConfiguration(newConfig);
        setTotalPrice(newPrice);
    }

    return (
        <div className="container mx-auto px-4 md:px-6 py-28 md:py-36">
            <div className="grid md:grid-cols-2 gap-12 items-start">
                <div className="relative aspect-square w-full rounded-2xl overflow-hidden glass-card p-4">
                    <Image
                        src={product.image}
                        alt={product.name}
                        fill
                        className="object-contain"
                        data-ai-hint={product.hint}
                    />
                </div>

                <div className="space-y-6">
                    <div className="space-y-3">
                        <span className="text-accent font-semibold">{product.category}</span>
                        <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight">{product.name}</h1>
                        <p className="text-3xl font-bold">{totalPrice.toFixed(2)}€</p>
                        <p className="text-lg text-muted-foreground">{product.description}</p>
                    </div>

                    {product.id === 1 && (
                        <PCConfigurator basePrice={product.price} onConfigChange={handleConfigChange} />
                    )}

                    <Button size="lg" className="w-full md:w-auto bg-accent hover:bg-accent/90 text-accent-foreground" onClick={handleAddToCart}>
                        <ShoppingCart className="mr-2 h-5 w-5" />
                        Ajouter au panier
                    </Button>
                    
                    <Separator className="bg-border" />

                    <div className="space-y-4 text-sm text-muted-foreground">
                        <div className="flex items-center gap-3">
                            <CheckCircle className="h-5 w-5 text-green-400" />
                            <span>En stock et prêt à être expédié.</span>
                        </div>
                         <div className="flex items-center gap-3">
                            <Truck className="h-5 w-5 text-blue-400" />
                            <span>Livraison gratuite et rapide en 24/48h.</span>
                        </div>
                         <div className="flex items-center gap-3">
                            <Shield className="h-5 w-5 text-amber-400" />
                            <span>Garantie constructeur de 2 ans incluse.</span>
                        </div>
                    </div>
                </div>
            </div>

            {relatedProducts.length > 0 && (
                <div className="mt-24">
                    <h2 className="text-3xl font-bold text-center mb-12">Vous pourriez aussi aimer</h2>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                        {relatedProducts.map(related => (
                             <Link href={`/store/${related.id}`} key={related.id}>
                               <Card className="group flex h-full flex-col overflow-hidden transition-all duration-300 rounded-2xl bg-card/95 hover:bg-card/25 dark:bg-card/80 dark:hover:bg-card/50 border border-border hover:border-primary/30 hover:shadow-2xl hover:shadow-primary/10 hover:backdrop-blur-xl">
                                  <CardContent className="relative flex-1 p-0">
                                    <div className="relative aspect-square">
                                        <Image
                                            src={related.image}
                                            alt={related.name}
                                            fill
                                            className="object-cover transition-transform duration-500"
                                            data-ai-hint={related.hint}
                                        />
                                    </div>
                                    <div className="p-6">
                                        <h3 className="font-bold text-foreground">{related.name}</h3>
                                        <p className="mt-2 text-xl font-semibold text-foreground">{related.price.toFixed(2)}€</p>
                                    </div>
                                  </CardContent>
                                </Card>
                              </Link>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}

[Fin du code]

---
# [productId]/page.tsx

[Début du code]

import { notFound } from 'next/navigation';
import { products, type Product } from '@/lib/products';
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import ProductClient from './client';

export function generateStaticParams() {
  return products.map((product) => ({
    productId: product.id.toString(),
  }));
}

function getProduct(id: string): Product | undefined {
  return products.find(p => p.id.toString() === id);
}

export default async function ProductPage({ params: { productId } }: { params: { productId: string } }) {
  const product = getProduct(productId);

  if (!product) {
    notFound();
  }

  const relatedProducts = products.filter(
    p => p.category === product.category && p.id !== product.id
  ).slice(0, 4);

  return (
    <>
      <Header />
      <main className="flex-1">
        <ProductClient product={product} relatedProducts={relatedProducts} />
      </main>
      <Footer />
    </>
  );
}

[Fin du code]
