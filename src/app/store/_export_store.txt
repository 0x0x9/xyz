# Export complet de la boutique (store)
# À donner à Gemini ou une IA pour reconstituer le dossier et ses dépendances.
# Chaque bloc de code doit être placé dans un fichier du dossier :
# src/app/store/
#
# Exemple :
# Le code du bloc "page.tsx" doit être copié dans src/app/store/page.tsx
# Le code du bloc "[productId]/client.tsx" doit être copié dans src/app/store/[productId]/client.tsx
# Le code du bloc "[productId]/page.tsx" doit être copié dans src/app/store/[productId]/page.tsx
#
# Assurez-vous de respecter l'arborescence pour que tout fonctionne correctement.

---
# page.tsx

[Début du code]
import StorePageClient from './client';

const StorePage = () => {
  return <StorePageClient />;
};

export default StorePage;
[Fin du code]

---
# client.tsx

[Début du code]

'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardTitle } from "@/components/ui/card";
import { ArrowRight, Cpu, Sparkles, ChevronRight } from "lucide-react";
import { products } from '@/lib/products';
import { motion } from 'framer-motion';
import { ProductCard } from '@/components/product-card';

const StorePageClient = () => {
    const categories = ['Tout', ...new Set(products.map(p => p.category))];
    const [selectedCategory, setSelectedCategory] = useState<string>('Tout');
    const filteredProducts = selectedCategory === 'Tout' ? products : products.filter(p => p.category === selectedCategory);

  return (
    <>
      <Header />
      <main className="flex-1">
        <section className="container mx-auto px-4 md:px-6 py-28 md:py-36 text-center">
            <div className="space-y-6 max-w-4xl mx-auto">
                <h1 className="text-4xl md:text-6xl lg:text-7xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70">
                La Boutique des Créatifs
                </h1>
                <p className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto">
                Le meilleur matériel et les logiciels les plus innovants, sélectionnés pour les créateurs exigeants qui repoussent les limites de l'imagination.
                </p>
            </div>
        </section>

        <section className="container mx-auto px-4 md:px-6">
            <div className="text-center mb-16">
                 <h2 className="text-3xl md:text-4xl font-bold">Au-delà des produits, un écosystème.</h2>
                 <p className="max-w-3xl mx-auto text-md text-muted-foreground mt-2">
                     Nos produits sont les briques d'un univers créatif unifié, conçu pour fonctionner en parfaite harmonie.
                 </p>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-20">
                <motion.div whileHover={{ y: -5 }} transition={{ type: 'spring', stiffness: 300 }}>
                    <Link href="/welcome">
                        <Card className="glass-card h-full p-8 flex flex-col justify-between text-center relative overflow-hidden group">
                            <div className="absolute -top-1/4 -right-1/4 w-1/2 h-1/2 bg-primary/30 rounded-full blur-3xl transition-all duration-500 group-hover:scale-150" />
                            <Sparkles className="h-12 w-12 text-primary mx-auto mb-4" />
                            <CardTitle className="text-3xl font-bold">L'Écosystème Créatif</CardTitle>
                            <CardContent className="p-0 mt-4">
                                <p className="text-muted-foreground text-lg">Découvrez (X)OS, l'environnement qui connecte tous vos outils et idées.</p>
                            </CardContent>
                             <Button variant="outline" className="mt-6 mx-auto rounded-full">
                                Découvrir (X)OS <ArrowRight className="ml-2 h-4 w-4" />
                            </Button>
                        </Card>
                    </Link>
                </motion.div>
                <motion.div whileHover={{ y: -5 }} transition={{ type: 'spring', stiffness: 300 }}>
                     <Link href="/hardware">
                        <Card className="glass-card h-full p-8 flex flex-col justify-between text-center relative overflow-hidden group">
                            <div className="absolute -bottom-1/4 -left-1/4 w-1/2 h-1/2 bg-blue-500/30 rounded-full blur-3xl transition-all duration-500 group-hover:scale-150" />
                            <Cpu className="h-12 w-12 text-blue-400 mx-auto mb-4" />
                            <CardTitle className="text-3xl font-bold">La Puissance Réinventée</CardTitle>
                            <CardContent className="p-0 mt-4">
                                <p className="text-muted-foreground text-lg">Explorez la Station X-1, le matériel conçu pour exceller avec (X)OS.</p>
                            </CardContent>
                             <Button variant="outline" className="mt-6 mx-auto rounded-full">
                                Explorer le matériel <ArrowRight className="ml-2 h-4 w-4" />
                            </Button>
                        </Card>
                    </Link>
                </motion.div>
            </div>
        </section>

        <section className="container mx-auto px-4 md:px-6 space-y-16 pb-20">
             <div>
                <div className="mb-12">
                     <div className="flex items-center text-sm text-muted-foreground mb-4">
                        <Link href="/store" className="hover:text-foreground">Boutique</Link>
                        {selectedCategory !== 'Tout' && (
                            <>
                                <ChevronRight className="h-4 w-4 mx-1" />
                                <span className="text-foreground">{selectedCategory}</span>
                            </>
                        )}
                    </div>
                    <h2 className="text-3xl font-bold text-center">Tous nos produits</h2>
                </div>
                 <div className="flex flex-wrap justify-center gap-2 mb-12">
                     {categories.map(category => (
                        <Button key={category} variant={selectedCategory === category ? 'secondary' : 'glass'} onClick={() => setSelectedCategory(category)} className="rounded-full">
                            {category}
                        </Button>
                    ))}
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                    {filteredProducts.map(product => (
                        <ProductCard key={product.id} product={product} />
                    ))}
                </div>
            </div>
        </section>
      </main>
      <Footer />
    </>
  );
}
export default StorePageClient;

[Fin du code]


---
# [productId]/client.tsx

[Début du code]

'use client';

import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ShoppingCart, CheckCircle, Shield, Truck, Check } from 'lucide-react';
import { useCart } from '@/hooks/use-cart-store';
import { useToast } from '@/hooks/use-toast';
import { type Product } from '@/lib/products';
import { PCConfigurator, type Configuration } from '@/components/ui/pc-configurator';
import { useState } from 'react';
import { cn } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';
import { ProductCard } from '@/components/product-card';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

export default function ProductClient({ product, relatedProducts }: { product: Product, relatedProducts: Product[] }) {
    const { addItem } = useCart();
    const { toast } = useToast();
    const [configuration, setConfiguration] = useState<Configuration | null>(null);
    const [totalPrice, setTotalPrice] = useState(product.price);
    const [activeImage, setActiveImage] = useState(product.images[0]);

    const handleAddToCart = () => {
        const productToAdd = {
            ...product,
            price: totalPrice,
            name: configuration ? `${product.name} (Configuré)` : product.name,
            configuration: configuration ?? undefined,
            image: activeImage,
        };
        addItem(productToAdd);
        toast({
            title: "Ajouté au panier !",
            description: `"${productToAdd.name}" est maintenant dans votre panier.`,
        });
    };
    
    const handleConfigChange = (newConfig: Configuration, newPrice: number) => {
        setConfiguration(newConfig);
        setTotalPrice(newPrice);
        // Change image based on config
        const configKeys = Object.keys(newConfig);
        const changedKey = configKeys.find(key => newConfig[key as keyof Configuration] !== (configuration?.[key as keyof Configuration] ?? ''));
        
        if (changedKey) {
            const optionsMap: Record<string, number> = {
                'gpu': 1, 'ram': 2, 'storage': 3, 'cpu': 0,
            };
            const component = changedKey as keyof typeof optionsMap;
            const imageIndex = optionsMap[component] || 0;
            if (product.images[imageIndex]) {
                setActiveImage(product.images[imageIndex]);
            }
        }
    }

    return (
        <div className="container mx-auto px-4 md:px-6 py-28 md:py-36">
            <div className="grid md:grid-cols-2 gap-12 items-start">
                <div className="space-y-4">
                    <div className="relative aspect-square w-full rounded-2xl overflow-hidden glass-card p-4">
                         <AnimatePresence mode="wait">
                            <motion.div
                                key={activeImage}
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                exit={{ opacity: 0 }}
                                transition={{ duration: 0.3 }}
                                className="absolute inset-0"
                            >
                                <Image
                                    src={activeImage}
                                    alt={product.name}
                                    fill
                                    className="object-contain"
                                    data-ai-hint={product.hint}
                                />
                            </motion.div>
                        </AnimatePresence>
                    </div>
                    {product.images.length > 1 && (
                        <div className="grid grid-cols-5 gap-2">
                            {product.images.map((img, idx) => (
                                <button
                                    key={idx}
                                    onClick={() => setActiveImage(img)}
                                    className={cn(
                                        "relative aspect-square w-full rounded-lg overflow-hidden border-2 transition-all",
                                        activeImage === img ? "border-primary" : "border-transparent hover:border-primary/50"
                                    )}
                                >
                                    <Image
                                        src={img}
                                        alt={`${product.name} - vue ${idx + 1}`}
                                        fill
                                        className="object-cover"
                                    />
                                </button>
                            ))}
                        </div>
                    )}
                </div>


                <div className="space-y-6">
                    <div className="space-y-3">
                        <span className="text-accent font-semibold">{product.category}</span>
                        <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight">{product.name}</h1>
                        <p className="text-3xl font-bold">{totalPrice.toFixed(2)}€</p>
                        <p className="text-lg text-muted-foreground">{product.description}</p>
                    </div>

                    {product.configurable && (
                        <PCConfigurator basePrice={product.price} onConfigChange={handleConfigChange} />
                    )}

                    <Button size="lg" className="w-full md:w-auto bg-accent hover:bg-accent/90 text-accent-foreground" onClick={handleAddToCart}>
                        <ShoppingCart className="mr-2 h-5 w-5" />
                        Ajouter au panier
                    </Button>
                    
                    <Separator className="bg-border" />
                    
                    {product.features && (
                        <div className="space-y-3">
                            <h3 className="text-lg font-semibold">Caractéristiques principales</h3>
                            <ul className="space-y-2">
                                {product.features.map((feature, i) => (
                                    <li key={i} className="flex items-center gap-3 text-muted-foreground">
                                        <Check className="h-5 w-5 text-green-500" />
                                        <span>{feature}</span>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                    
                    <Accordion type="single" collapsible className="w-full">
                        <AccordionItem value="item-1">
                            <AccordionTrigger>Livraison & Retours</AccordionTrigger>
                            <AccordionContent>
                                Livraison gratuite en 24/48h dans toute l'Europe. Retours gratuits sous 30 jours. Tous nos emballages sont 100% recyclés et recyclables.
                            </AccordionContent>
                        </AccordionItem>
                        <AccordionItem value="item-2">
                            <AccordionTrigger>Garantie & Support</AccordionTrigger>
                            <AccordionContent>
                                Ce produit est couvert par une garantie constructeur de 2 ans. Notre support technique est disponible 24/7 pour vous assister en cas de besoin.
                            </AccordionContent>
                        </AccordionItem>
                        <AccordionItem value="item-3">
                            <AccordionTrigger>Spécifications Techniques</AccordionTrigger>
                            <AccordionContent>
                                Les spécifications détaillées sont disponibles dans le manuel utilisateur. Pour toute question technique, n'hésitez pas à contacter notre support expert.
                            </AccordionContent>
                        </AccordionItem>
                    </Accordion>

                </div>
            </div>

            {relatedProducts.length > 0 && (
                <div className="mt-24">
                    <h2 className="text-3xl font-bold text-center mb-12">Vous pourriez aussi aimer</h2>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                        {relatedProducts.map(related => (
                             <ProductCard key={related.id} product={related} />
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}
[Fin du code]

---
# [productId]/page.tsx

[Début du code]

import { notFound } from 'next/navigation';
import { products, type Product } from '@/lib/products';
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import ProductClient from './client';

export function generateStaticParams() {
  return products.map((product) => ({
    productId: product.id.toString(),
  }));
}

function getProduct(id: string): Product | undefined {
  return products.find(p => p.id.toString() === id);
}

const ProductPage = async ({ params: { productId } }: { params: { productId: string } }) => {
  const product = getProduct(productId);

  if (!product) {
    notFound();
  }

  const relatedProducts = products.filter(
    p => p.category === product.category && p.id !== product.id
  ).slice(0, 4);

  return (
    <>
      <Header />
      <main className="flex-1">
        <ProductClient product={product} relatedProducts={relatedProducts} />
      </main>
      <Footer />
    </>
  );
}
export default ProductPage;
[Fin du code]
