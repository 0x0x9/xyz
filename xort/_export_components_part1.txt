# Export du dossier components (partie 1)
# À donner à Gemini ou une IA pour reconstituer le dossier src/components/ et ses dépendances.
# Chaque bloc de code doit être placé dans le dossier :
# src/components/
#
# Exemple :
# Le code du bloc "auth-component.tsx" doit être copié dans src/components/auth-component.tsx
#
# Assurez-vous de respecter l'arborescence pour que tout fonctionne correctement.

---
# auth-component.tsx

[Début du code]

'use client';
// Placeholder component
export default function AuthComponent() {
    return null;
}

[Fin du code]

---
# cloud-app.tsx

[Début du code]

'use client';

import { useState, useEffect, useCallback } from 'react';

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import CloudClient from '@/app/cloud/client'; // This is now the Dashboard
import SharingClient from '@/app/cloud/sharing/client';
import DocManager from '@/components/doc-manager';
import ActivityClient from '@/app/cloud/activity/client';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { LayoutDashboard, Folder, Share2, History } from 'lucide-react';
import { listDocumentsAction } from '@/app/actions';
import type { Doc } from '@/ai/types';

export default function CloudApp() {
    const [tab, setTab] = useState('dashboard');
    const [docs, setDocs] = useState<Doc[]>([]);
    const [loading, setLoading] = useState(true);
    const { toast } = useToast();

    const fetchDocs = useCallback(async () => {
        setLoading(true);
        try {
            const result = await listDocumentsAction();
            setDocs(result || []);
        } catch (error: any) {
            toast({ variant: 'destructive', title: 'Erreur', description: error.message });
            setDocs([]);
        } finally {
            setLoading(false);
        }
    }, [toast]);

    useEffect(() => {
        fetchDocs();
    }, [fetchDocs]);

    const tabs = [
        { value: 'dashboard', label: 'Tableau de bord', description: 'Aperçu de votre espace cloud.', icon: LayoutDashboard },
        { value: 'files', label: 'Fichiers', description: 'Gérez tous vos documents.', icon: Folder },
        { value: 'sharing', label: 'Partage', description: 'Gérez vos liens de partage.', icon: Share2 },
        { value: 'activity', label: 'Activité', description: 'Consultez les dernières modifications.', icon: History },
    ];
    
    const currentTabInfo = tabs.find(t => t.value === tab) || tabs[0];

    if (loading) {
         return (
            <div className="flex-1 p-4 flex flex-col h-full space-y-4">
                <Skeleton className="h-8 w-64" />
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {Array.from({length: 4}).map((_, i) => <Skeleton key={i} className="h-32 w-full" />)}
                </div>
                <Skeleton className="flex-1 w-full" />
            </div>
        );
    }

    return (
        <Tabs defaultValue={tab} value={tab} onValueChange={setTab} className="flex-1 p-2 flex flex-col h-full bg-transparent">
            <div className="flex justify-between items-center mb-4 flex-shrink-0">
                <div>
                    <h2 className="text-xl font-bold">{currentTabInfo.label}</h2>
                    <p className="text-sm text-muted-foreground">{currentTabInfo.description}</p>
                </div>
                <TabsList className="hidden md:inline-flex bg-black/10 dark:bg-white/10 gap-1 p-1">
                    {tabs.map((t) => (
                        <TabsTrigger key={t.value} value={t.value} className="flex items-center gap-2 data-[state=active]:bg-background/80 data-[state=inactive]:bg-transparent">
                           <t.icon className="h-4 w-4"/>
                           {t.label}
                        </TabsTrigger>
                    ))}
                </TabsList>
            </div>
            
            <div className="flex-1 min-h-0">
                <TabsContent value="dashboard" className="w-full h-full mt-0 data-[state=inactive]:hidden flex flex-col">
                    <CloudClient docs={docs} loading={loading} onDataChange={fetchDocs} />
                </TabsContent>
                <TabsContent value="files" className="w-full h-full mt-0 data-[state=inactive]:hidden flex flex-col">
                    <DocManager onDataChange={fetchDocs} />
                </TabsContent>
                <TabsContent value="sharing" className="w-full h-full mt-0 data-[state=inactive]:hidden flex flex-col">
                    <div className="overflow-y-auto h-full no-scrollbar">
                        <SharingClient docs={docs} onDataChange={fetchDocs} />
                    </div>
                </TabsContent>
                <TabsContent value="activity" className="w-full h-full mt-0 data-[state=inactive]:hidden flex flex-col">
                    <div className="overflow-y-auto h-full no-scrollbar">
                        <ActivityClient docs={docs} loading={loading} />
                    </div>
                </TabsContent>
            </div>
        </Tabs>
    );
}

[Fin du code]

---
# code-editor.tsx

[Début du code]

'use client';

import { useState, useCallback, useEffect, useMemo, useRef, useActionState } from 'react';
import { useSearchParams } from 'next/navigation';
import { useTheme } from 'next-themes';
import CodeMirror from '@uiw/react-codemirror';
import { githubDark, githubLight } from '@uiw/codemirror-theme-github';
import { EditorView } from '@codemirror/view';
import { useFormStatus } from 'react-dom';

import { cn } from '@/lib/utils';
import DocManager from './doc-manager';
import type { Doc, Frame } from '@/ai/types';
import { getLanguageExtension } from '@/lib/language-map';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogCancel,
} from "@/components/ui/alert-dialog"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import { Input } from './ui/input';
import { Textarea } from '@/components/ui/textarea';

import { useToast } from '@/hooks/use-toast';
import { Loader, Wand2, Bug, BrainCircuit, Save, TerminalSquare, FileText, AppWindow, Upload, Image as ImageIconLucide, PanelLeftOpen, PanelLeftClose, LayoutTemplate, X, Sparkles } from 'lucide-react';
import { refactorCodeAction, debugCodeAction, explainCodeAction, generateFrameAction, uploadDocumentAction } from '@/app/actions';
import { Skeleton } from './ui/skeleton';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Image from 'next/image';
import { html } from '@codemirror/lang-html';
import { css } from '@codemirror/lang-css';
import { javascript } from '@codemirror/lang-javascript';
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from './ui/tooltip';
import { LoadingState } from './loading-state';
import AiLoadingAnimation from './ui/ai-loading-animation';

// ... (le code complet du fichier code-editor.tsx suit ici, voir l'original pour tout le contenu)

[Fin du code]

---
# code-generator.tsx

[Début du code]

'use client';

import { useActionState, useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { useFormState, useFormStatus } from 'react-dom';
import { generateCodeAction } from '@/app/actions';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Sparkles, Code2, Copy, FileText, TerminalSquare, Save, X } from 'lucide-react';
import type { GenerateCodeOutput } from '@/ai/types';
import Link from 'next/link';
import { LoadingState } from './loading-state';
import { httpsCallable } from 'firebase/functions';
import { functions } from '@/lib/firebase';
import AiLoadingAnimation from './ui/ai-loading-animation';
import { useNotifications } from '@/hooks/use-notifications';

// ... (le code complet du fichier code-generator.tsx suit ici, voir l'original pour tout le contenu)

[Fin du code]

---
# deck-generator.tsx

[Début du code]

'use client';

import { useState, useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { useFormState, useFormStatus } from 'react-dom';
import { generateDeckAction, generateImageAction } from '@/app/actions';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Presentation, Sparkles, ArrowLeft, ArrowRight, NotebookText, Image as ImageIcon, Download, Loader, Save, RefreshCcw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import type { GenerateDeckOutput, DeckSlide } from '@/ai/types';
import { LoadingState } from './loading-state';
import AiLoadingAnimation from './ui/ai-loading-animation';
import Image from 'next/image';
import { httpsCallable } from 'firebase/functions';
import { functions } from '@/lib/firebase';
import { useNotifications } from '@/hooks/use-notifications';
import { Skeleton } from './ui/skeleton';

// ... (le code complet du fichier deck-generator.tsx suit ici, voir l'original pour tout le contenu)

[Fin du code]
